Introduction Log4j
Log4j is a fast, flexible and reliable logging framework (APIS) written in Java developed in early 1996. It is distributed under the Apache Software License. It is a tool used for small to large scale Selenium Automation projects.

Log4j components
-Loggers
-Appenders
-Layout


Loggers: It is responsible for logging information. To implement loggers into a project following steps need to be performed
- Create an instance for logger class: Logger class is a Java-based utility that has got all the generic methods already implemented to use log4j
- Define the Log4j level: Primarily there are five kinds of log levels
	All - This level of logging will log everything ( it turns all the logs on )
	DEBUG – print the debugging information and is helpful in development stage
	INFO – print informational message that highlights the progress of the application
	WARN – print information regarding faulty and unexpected system behavior.
	ERROR – print error message that might allow system to continue
	FATAL – print system critical information which are causing the application to crash
	OFF – No logging
	
Appenders: It is used to deliver LogEvents to their destination. It decides what will happen with log information. In simple words, it is used to write the logs in file. Following are few types of Appenders
	1.ConsoleAppender logs to standard output
	2.File appender prints logs to some file
	3.Rolling file appender to a file with maximum size
Note: In log4j properties we can call appender with any name. There are other appenders as well but we will restrict to these few.

Layouts: It is responsible for formatting logging information in different styles.
The Logger class provides different methods to handle logging activities. It provides two static methods for obtaining a Logger Object.

	Public static Logger getRootLogger()
	Public static Logger getLogger(String name)
	


How log4j is configured?
To configure log4j we have to decide which appender to implement. Accordingly, parameters of appender will be set.
We will do two configurations or logs,
	First: root logger, that will write all system generated logs in file name i.e. Selenium.logs
	Second: Will write the information generated by manual commands in code into the file name- Manual.logs
	Layout will be PatternLayout
	

How log4j is used within script?
In code, we have used "log" as a reference variable referencing getLogger method of Logger Class
	Logger log = Logger.getLogger("devpinoyLogger");
Use "log" referencing variable and debug method to log the information we want.
	log.debug("--information--");
	
	
Steps to work with log file.
1. In the POM.xml set the maven dependency for the log4j
2. Configure a property file (the extension is.properties)
3. Create a folder log to save the output
4. Within the script, create a log object and add information.
